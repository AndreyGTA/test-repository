import re
import telebot
import requests
from datetime import datetime
from telebot import types

BOT_TOKEN = '7798818033:AAEaBcDReUNQtfjJdQNfOqUEl2DFeSXkCKw'
OWM_API_KEY = '134995876b8440fb5056831016f81627'
LANG = 'ru'
UNITS = 'metric'

bot = telebot.TeleBot(BOT_TOKEN)


def get_weather_forecast(city):
    url = f'http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OWM_API_KEY}&units={UNITS}&lang={LANG}&cnt=40'
    response = requests.get(url)
    data = response.json()

    if data.get('cod') != '200':
        return None

    daily_forecast = {}
    for item in data['list']:
        date = datetime.fromtimestamp(item['dt']).strftime('%Y-%m-%d')
        if date not in daily_forecast:
            daily_forecast[date] = {
                'temp_min': item['main']['temp_min'],
                'temp_max': item['main']['temp_max'],
                'conditions': [],
                'humidity': [],
                'wind_speed': []
            }

        if item['main']['temp_min'] < daily_forecast[date]['temp_min']:
            daily_forecast[date]['temp_min'] = item['main']['temp_min']
        if item['main']['temp_max'] > daily_forecast[date]['temp_max']:
            daily_forecast[date]['temp_max'] = item['main']['temp_max']

        daily_forecast[date]['conditions'].append(item['weather'][0]['description'])
        daily_forecast[date]['humidity'].append(item['main']['humidity'])
        daily_forecast[date]['wind_speed'].append(item['wind']['speed'])

    result = []
    for date, values in daily_forecast.items():
        main_condition = max(set(values['conditions']), key=values['conditions'].count)
        avg_humidity = round(sum(values['humidity']) / len(values['humidity']))
        avg_wind = round(sum(values['wind_speed']) / len(values['wind_speed']), 1)

        weekday = datetime.strptime(date, '%Y-%m-%d').strftime('%A')
        weekday_ru = {
            'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
            'Wednesday': '–°—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
            'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
            'Saturday': '–°—É–±–±–æ—Ç–∞',
            'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }.get(weekday, weekday)

        result.append({
            'date': f"{weekday_ru} ({date.split('-')[2]}.{date.split('-')[1]})",
            'temp_min': values['temp_min'],
            'temp_max': values['temp_max'],
            'condition': main_condition,
            'humidity': avg_humidity,
            'wind': avg_wind
        })

    return result[:7]


# –°–æ–∑–¥–∞—ë–º –º–µ–Ω—é —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏: –æ–±—â–∞—è –ø–æ–≥–æ–¥–∞ –∏ –ø–æ–≥–æ–¥–∞ –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_weather = types.KeyboardButton('–ü–æ–≥–æ–¥–∞')
    btn_nsk = types.KeyboardButton('–ü–æ–≥–æ–¥–∞ –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ')
    markup.add(btn_weather, btn_nsk)
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda message: message.text == '–ü–æ–≥–æ–¥–∞ –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ')
def send_nsk_weather(message):
    city = "Novosibirsk"
    bot.send_chat_action(message.chat.id, 'typing')
    forecast = get_weather_forecast(city)

    if not forecast:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞.")
        return

    response = f"üå¶Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ –Ω–∞ 7 –¥–Ω–µ–π:\n\n"
    for day in forecast:
        response += (
            f"üìÖ <b>{day['date']}</b>\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç {day['temp_min']}¬∞C –¥–æ {day['temp_max']}¬∞C\n"
            f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {day['condition'].capitalize()}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {day['humidity']}%\n"
            f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {day['wind']} –º/—Å\n\n"
        )

    bot.send_message(message.chat.id, response, parse_mode='HTML', reply_markup=main_menu())


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–≥–æ–¥–∞¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞.",
        reply_markup=main_menu()
    )


@bot.message_handler(func=lambda message: message.text == '–ü–æ–≥–æ–¥–∞')
def ask_city(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, ru):")
    bot.register_next_step_handler(msg, send_weather_for_city)


@bot.message_handler(commands=['weather'])
def send_weather(message):
    parts = message.text.split(maxsplit=1)
    if len(parts) == 1:
        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, ru):")
        bot.register_next_step_handler(msg, send_weather_for_city)
    else:
        city = parts[1].strip()
        send_weather_for_city(message, city)


def send_weather_for_city(message, city=None):
    if city is None:
        city = message.text.strip()

    bot.send_chat_action(message.chat.id, 'typing')
    forecast = get_weather_forecast(city)

    if not forecast:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞. "
                              "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    response = f"üå¶Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city} –Ω–∞ 7 –¥–Ω–µ–π:\n\n"
    for day in forecast:
        response += (
            f"üìÖ <b>{day['date']}</b>\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç {day['temp_min']}¬∞C –¥–æ {day['temp_max']}¬∞C\n"
            f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {day['condition'].capitalize()}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {day['humidity']}%\n"
            f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {day['wind']} –º/—Å\n\n"
        )

    bot.send_message(message.chat.id, response, parse_mode='HTML', reply_markup=main_menu())
    import re

    def is_valid_city_name(city):
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (–ª–∞—Ç–∏–Ω–∏—Ü—É –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—É), –ø—Ä–æ–±–µ–ª—ã, –∑–∞–ø—è—Ç—ã–µ –∏ –¥–µ—Ñ–∏—Å—ã
        pattern = r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s,\-]+$'
        return bool(re.match(pattern, city.strip()))

    def send_weather_for_city(message, city=None):
        if city is None:
            city = message.text.strip()

        if not is_valid_city_name(city):
            msg = bot.reply_to(message, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. "
                                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —Ü–∏—Ñ—Ä –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:")
            bot.register_next_step_handler(msg, send_weather_for_city)
            return

        bot.send_chat_action(message.chat.id, 'typing')
        forecast = get_weather_forecast(city)

        if not forecast:
            msg = bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞. "
                                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            bot.register_next_step_handler(msg, send_weather_for_city)
            return


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
